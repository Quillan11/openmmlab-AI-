2023-02-06 16:58:14,161 - mmcls - INFO - Environment info:
------------------------------------------------------------
sys.platform: linux
Python: 3.8.16 (default, Jan 17 2023, 23:13:24) [GCC 11.2.0]
CUDA available: True
GPU 0: NVIDIA GeForce RTX 3090
CUDA_HOME: /data/apps/cuda/11.3
NVCC: Cuda compilation tools, release 11.3, V11.3.58
GCC: gcc (GCC) 7.3.0
PyTorch: 1.12.0+cu113
PyTorch compiling details: PyTorch built with:
  - GCC 9.3
  - C++ Version: 201402
  - Intel(R) Math Kernel Library Version 2020.0.0 Product Build 20191122 for Intel(R) 64 architecture applications
  - Intel(R) MKL-DNN v2.6.0 (Git Hash 52b5f107dd9cf10910aaa19cb47f3abf9b349815)
  - OpenMP 201511 (a.k.a. OpenMP 4.5)
  - LAPACK is enabled (usually provided by MKL)
  - NNPACK is enabled
  - CPU capability usage: AVX2
  - CUDA Runtime 11.3
  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_86,code=sm_86
  - CuDNN 8.3.2  (built against CUDA 11.5)
  - Magma 2.5.2
  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=11.3, CUDNN_VERSION=8.3.2, CXX_COMPILER=/opt/rh/devtoolset-9/root/usr/bin/c++, CXX_FLAGS= -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_KINETO -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DSYMBOLICATE_MOBILE_DEBUG_HANDLE -DEDGE_PROFILER_USE_KINETO -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-unused-parameter -Wno-unused-function -Wno-unused-result -Wno-unused-local-typedefs -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Werror=cast-function-type -Wno-stringop-overflow, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_VERSION=1.12.0, USE_CUDA=ON, USE_CUDNN=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=OFF, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, USE_ROCM=OFF, 

TorchVision: 0.13.0+cu113
OpenCV: 4.7.0
MMCV: 1.7.0
MMCV Compiler: GCC 9.3
MMCV CUDA Compiler: 11.3
MMClassification: 0.25.0+3d4f80d
------------------------------------------------------------

2023-02-06 16:58:14,162 - mmcls - INFO - Distributed training: False
2023-02-06 16:58:14,656 - mmcls - INFO - Config:
model = dict(
    type='ImageClassifier',
    backbone=dict(
        type='ResNet',
        depth=18,
        num_stages=4,
        out_indices=(3, ),
        style='pytorch'),
    neck=dict(type='GlobalAveragePooling'),
    head=dict(
        type='LinearClsHead',
        num_classes=5,
        in_channels=512,
        loss=dict(type='CrossEntropyLoss', loss_weight=1.0),
        topk=(1, 3)))
dataset_type = 'ImageNet'
img_norm_cfg = dict(
    mean=[123.675, 116.28, 103.53], std=[58.395, 57.12, 57.375], to_rgb=True)
train_pipeline = [
    dict(type='LoadImageFromFile'),
    dict(type='RandomResizedCrop', size=224),
    dict(type='RandomFlip', flip_prob=0.5, direction='horizontal'),
    dict(
        type='Normalize',
        mean=[123.675, 116.28, 103.53],
        std=[58.395, 57.12, 57.375],
        to_rgb=True),
    dict(type='ImageToTensor', keys=['img']),
    dict(type='ToTensor', keys=['gt_label']),
    dict(type='Collect', keys=['img', 'gt_label'])
]
test_pipeline = [
    dict(type='LoadImageFromFile'),
    dict(type='Resize', size=(256, -1)),
    dict(type='CenterCrop', crop_size=224),
    dict(
        type='Normalize',
        mean=[123.675, 116.28, 103.53],
        std=[58.395, 57.12, 57.375],
        to_rgb=True),
    dict(type='ImageToTensor', keys=['img']),
    dict(type='Collect', keys=['img'])
]
data = dict(
    samples_per_gpu=32,
    workers_per_gpu=2,
    train=dict(
        type='ImageNet',
        data_prefix=
        '/HOME/scz4253/run/mmclassification/mmclassification/data/flower/train',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(type='RandomResizedCrop', size=224),
            dict(type='RandomFlip', flip_prob=0.5, direction='horizontal'),
            dict(
                type='Normalize',
                mean=[123.675, 116.28, 103.53],
                std=[58.395, 57.12, 57.375],
                to_rgb=True),
            dict(type='ImageToTensor', keys=['img']),
            dict(type='ToTensor', keys=['gt_label']),
            dict(type='Collect', keys=['img', 'gt_label'])
        ],
        ann_file=
        '/HOME/scz4253/run/mmclassification/mmclassification/data/flower/train.txt',
        classes=
        '/HOME/scz4253/run/mmclassification/mmclassification/data/flower/classes.txt'
    ),
    val=dict(
        type='ImageNet',
        data_prefix=
        '/HOME/scz4253/run/mmclassification/mmclassification/data/flower/val',
        ann_file=
        '/HOME/scz4253/run/mmclassification/mmclassification/data/flower/val.txt',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(type='Resize', size=(256, -1)),
            dict(type='CenterCrop', crop_size=224),
            dict(
                type='Normalize',
                mean=[123.675, 116.28, 103.53],
                std=[58.395, 57.12, 57.375],
                to_rgb=True),
            dict(type='ImageToTensor', keys=['img']),
            dict(type='Collect', keys=['img'])
        ],
        classes=
        '/HOME/scz4253/run/mmclassification/mmclassification/data/flower/classes.txt'
    ),
    test=dict(
        type='ImageNet',
        data_prefix='data/imagenet/val',
        ann_file='data/imagenet/meta/val.txt',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(type='Resize', size=(256, -1)),
            dict(type='CenterCrop', crop_size=224),
            dict(
                type='Normalize',
                mean=[123.675, 116.28, 103.53],
                std=[58.395, 57.12, 57.375],
                to_rgb=True),
            dict(type='ImageToTensor', keys=['img']),
            dict(type='Collect', keys=['img'])
        ]))
evaluation = dict(interval=1, metric='accuracy')
checkpoint_config = dict(interval=1)
log_config = dict(interval=100, hooks=[dict(type='TextLoggerHook')])
dist_params = dict(backend='nccl')
log_level = 'INFO'
load_from = '/HOME/scz4253/run/mmclassification/mmclassification/checkpoints/resnet18_batch256_imagenet_20200708-34ab8f90.pth'
resume_from = None
workflow = [('train', 1)]
optimizer = dict(type='SGD', lr=0.01, momentum=0.9, weight_decay=0.0001)
optimizer_config = dict(grad_clip=None)
lr_config = dict(policy='step', step=[30, 60, 90])
runner = dict(type='EpochBasedRunner', max_epochs=100)
work_dir = 'work/resnet18_b32_flower'
gpu_ids = [0]

2023-02-06 16:58:14,658 - mmcls - INFO - Set random seed to 1890104877, deterministic: False
2023-02-06 16:58:14,766 - mmcls - INFO - initialize ResNet with init_cfg [{'type': 'Kaiming', 'layer': ['Conv2d']}, {'type': 'Constant', 'val': 1, 'layer': ['_BatchNorm', 'GroupNorm']}]
2023-02-06 16:58:14,857 - mmcls - INFO - initialize LinearClsHead with init_cfg {'type': 'Normal', 'layer': 'Linear', 'std': 0.01}
Name of parameter - Initialization information

backbone.conv1.weight - torch.Size([64, 3, 7, 7]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.bn1.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.bn1.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer1.0.conv1.weight - torch.Size([64, 64, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer1.0.bn1.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer1.0.bn1.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer1.0.conv2.weight - torch.Size([64, 64, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer1.0.bn2.weight - torch.Size([64]): 
Initialized by user-defined `init_weights` in ResNet  

backbone.layer1.0.bn2.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer1.1.conv1.weight - torch.Size([64, 64, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer1.1.bn1.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer1.1.bn1.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer1.1.conv2.weight - torch.Size([64, 64, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer1.1.bn2.weight - torch.Size([64]): 
Initialized by user-defined `init_weights` in ResNet  

backbone.layer1.1.bn2.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer2.0.conv1.weight - torch.Size([128, 64, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer2.0.bn1.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer2.0.bn1.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer2.0.conv2.weight - torch.Size([128, 128, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer2.0.bn2.weight - torch.Size([128]): 
Initialized by user-defined `init_weights` in ResNet  

backbone.layer2.0.bn2.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer2.0.downsample.0.weight - torch.Size([128, 64, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer2.0.downsample.1.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer2.0.downsample.1.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer2.1.conv1.weight - torch.Size([128, 128, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer2.1.bn1.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer2.1.bn1.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer2.1.conv2.weight - torch.Size([128, 128, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer2.1.bn2.weight - torch.Size([128]): 
Initialized by user-defined `init_weights` in ResNet  

backbone.layer2.1.bn2.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.0.conv1.weight - torch.Size([256, 128, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer3.0.bn1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.0.bn1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.0.conv2.weight - torch.Size([256, 256, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer3.0.bn2.weight - torch.Size([256]): 
Initialized by user-defined `init_weights` in ResNet  

backbone.layer3.0.bn2.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.0.downsample.0.weight - torch.Size([256, 128, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer3.0.downsample.1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.0.downsample.1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.1.conv1.weight - torch.Size([256, 256, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer3.1.bn1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.1.bn1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.1.conv2.weight - torch.Size([256, 256, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer3.1.bn2.weight - torch.Size([256]): 
Initialized by user-defined `init_weights` in ResNet  

backbone.layer3.1.bn2.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer4.0.conv1.weight - torch.Size([512, 256, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer4.0.bn1.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer4.0.bn1.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer4.0.conv2.weight - torch.Size([512, 512, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer4.0.bn2.weight - torch.Size([512]): 
Initialized by user-defined `init_weights` in ResNet  

backbone.layer4.0.bn2.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer4.0.downsample.0.weight - torch.Size([512, 256, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer4.0.downsample.1.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer4.0.downsample.1.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer4.1.conv1.weight - torch.Size([512, 512, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer4.1.bn1.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer4.1.bn1.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer4.1.conv2.weight - torch.Size([512, 512, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer4.1.bn2.weight - torch.Size([512]): 
Initialized by user-defined `init_weights` in ResNet  

backbone.layer4.1.bn2.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

head.fc.weight - torch.Size([5, 512]): 
NormalInit: mean=0, std=0.01, bias=0 

head.fc.bias - torch.Size([5]): 
NormalInit: mean=0, std=0.01, bias=0 
2023-02-06 16:58:17,282 - mmcls - INFO - load checkpoint from local path: /HOME/scz4253/run/mmclassification/mmclassification/checkpoints/resnet18_batch256_imagenet_20200708-34ab8f90.pth
2023-02-06 16:58:17,365 - mmcls - WARNING - The model and loaded state dict do not match exactly

size mismatch for head.fc.weight: copying a param with shape torch.Size([1000, 512]) from checkpoint, the shape in current model is torch.Size([5, 512]).
size mismatch for head.fc.bias: copying a param with shape torch.Size([1000]) from checkpoint, the shape in current model is torch.Size([5]).
2023-02-06 16:58:17,366 - mmcls - INFO - Start running, host: scz4253@g0098, work_dir: /data/run01/scz4253/mmclassification/mmclassification/work/resnet18_b32_flower
2023-02-06 16:58:17,367 - mmcls - INFO - Hooks will be executed in the following order:
before_run:
(VERY_HIGH   ) StepLrUpdaterHook                  
(NORMAL      ) CheckpointHook                     
(LOW         ) EvalHook                           
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
before_train_epoch:
(VERY_HIGH   ) StepLrUpdaterHook                  
(LOW         ) IterTimerHook                      
(LOW         ) EvalHook                           
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
before_train_iter:
(VERY_HIGH   ) StepLrUpdaterHook                  
(LOW         ) IterTimerHook                      
(LOW         ) EvalHook                           
 -------------------- 
after_train_iter:
(ABOVE_NORMAL) OptimizerHook                      
(NORMAL      ) CheckpointHook                     
(LOW         ) IterTimerHook                      
(LOW         ) EvalHook                           
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
after_train_epoch:
(NORMAL      ) CheckpointHook                     
(LOW         ) EvalHook                           
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
before_val_epoch:
(LOW         ) IterTimerHook                      
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
before_val_iter:
(LOW         ) IterTimerHook                      
 -------------------- 
after_val_iter:
(LOW         ) IterTimerHook                      
 -------------------- 
after_val_epoch:
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
after_run:
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
2023-02-06 16:58:17,367 - mmcls - INFO - workflow: [('train', 1)], max: 100 epochs
2023-02-06 16:58:17,367 - mmcls - INFO - Checkpoints will be saved to /data/run01/scz4253/mmclassification/mmclassification/work/resnet18_b32_flower by HardDiskBackend.
2023-02-06 16:58:51,618 - mmcls - INFO - Saving checkpoint at 1 epochs
2023-02-06 16:58:59,676 - mmcls - INFO - Epoch(val) [1][18]	accuracy_top-1: 75.5245, accuracy_top-5: 100.0000
2023-02-06 16:59:05,132 - mmcls - INFO - Saving checkpoint at 2 epochs
2023-02-06 16:59:06,099 - mmcls - INFO - Epoch(val) [2][18]	accuracy_top-1: 82.1678, accuracy_top-5: 100.0000
2023-02-06 16:59:11,536 - mmcls - INFO - Saving checkpoint at 3 epochs
2023-02-06 16:59:12,503 - mmcls - INFO - Epoch(val) [3][18]	accuracy_top-1: 90.7343, accuracy_top-5: 100.0000
2023-02-06 16:59:17,958 - mmcls - INFO - Saving checkpoint at 4 epochs
2023-02-06 16:59:19,137 - mmcls - INFO - Epoch(val) [4][18]	accuracy_top-1: 86.1888, accuracy_top-5: 100.0000
2023-02-06 16:59:24,557 - mmcls - INFO - Saving checkpoint at 5 epochs
2023-02-06 16:59:25,521 - mmcls - INFO - Epoch(val) [5][18]	accuracy_top-1: 88.9860, accuracy_top-5: 100.0000
2023-02-06 16:59:30,911 - mmcls - INFO - Saving checkpoint at 6 epochs
2023-02-06 16:59:31,885 - mmcls - INFO - Epoch(val) [6][18]	accuracy_top-1: 88.4615, accuracy_top-5: 100.0000
2023-02-06 16:59:37,289 - mmcls - INFO - Saving checkpoint at 7 epochs
2023-02-06 16:59:38,252 - mmcls - INFO - Epoch(val) [7][18]	accuracy_top-1: 89.6853, accuracy_top-5: 100.0000
2023-02-06 16:59:43,702 - mmcls - INFO - Saving checkpoint at 8 epochs
2023-02-06 16:59:44,670 - mmcls - INFO - Epoch(val) [8][18]	accuracy_top-1: 88.6364, accuracy_top-5: 100.0000
2023-02-06 16:59:50,042 - mmcls - INFO - Saving checkpoint at 9 epochs
2023-02-06 16:59:51,012 - mmcls - INFO - Epoch(val) [9][18]	accuracy_top-1: 84.6154, accuracy_top-5: 100.0000
2023-02-06 16:59:56,403 - mmcls - INFO - Saving checkpoint at 10 epochs
2023-02-06 16:59:57,371 - mmcls - INFO - Epoch(val) [10][18]	accuracy_top-1: 93.1818, accuracy_top-5: 100.0000
2023-02-06 17:00:02,813 - mmcls - INFO - Saving checkpoint at 11 epochs
2023-02-06 17:00:03,779 - mmcls - INFO - Epoch(val) [11][18]	accuracy_top-1: 94.5804, accuracy_top-5: 100.0000
2023-02-06 17:00:09,210 - mmcls - INFO - Saving checkpoint at 12 epochs
2023-02-06 17:00:10,173 - mmcls - INFO - Epoch(val) [12][18]	accuracy_top-1: 93.5315, accuracy_top-5: 100.0000
2023-02-06 17:00:15,610 - mmcls - INFO - Saving checkpoint at 13 epochs
2023-02-06 17:00:16,577 - mmcls - INFO - Epoch(val) [13][18]	accuracy_top-1: 94.9301, accuracy_top-5: 100.0000
2023-02-06 17:00:21,982 - mmcls - INFO - Saving checkpoint at 14 epochs
2023-02-06 17:00:22,948 - mmcls - INFO - Epoch(val) [14][18]	accuracy_top-1: 93.7063, accuracy_top-5: 100.0000
2023-02-06 17:00:28,349 - mmcls - INFO - Saving checkpoint at 15 epochs
2023-02-06 17:00:29,308 - mmcls - INFO - Epoch(val) [15][18]	accuracy_top-1: 94.0559, accuracy_top-5: 100.0000
2023-02-06 17:00:34,731 - mmcls - INFO - Saving checkpoint at 16 epochs
2023-02-06 17:00:35,689 - mmcls - INFO - Epoch(val) [16][18]	accuracy_top-1: 93.7063, accuracy_top-5: 100.0000
2023-02-06 17:00:41,116 - mmcls - INFO - Saving checkpoint at 17 epochs
2023-02-06 17:00:42,079 - mmcls - INFO - Epoch(val) [17][18]	accuracy_top-1: 94.9301, accuracy_top-5: 100.0000
2023-02-06 17:00:47,471 - mmcls - INFO - Saving checkpoint at 18 epochs
2023-02-06 17:00:48,442 - mmcls - INFO - Epoch(val) [18][18]	accuracy_top-1: 95.1049, accuracy_top-5: 100.0000
2023-02-06 17:00:53,892 - mmcls - INFO - Saving checkpoint at 19 epochs
2023-02-06 17:00:54,848 - mmcls - INFO - Epoch(val) [19][18]	accuracy_top-1: 94.2308, accuracy_top-5: 100.0000
2023-02-06 17:01:00,286 - mmcls - INFO - Saving checkpoint at 20 epochs
2023-02-06 17:01:01,259 - mmcls - INFO - Epoch(val) [20][18]	accuracy_top-1: 91.0839, accuracy_top-5: 100.0000
2023-02-06 17:01:06,667 - mmcls - INFO - Saving checkpoint at 21 epochs
2023-02-06 17:01:07,643 - mmcls - INFO - Epoch(val) [21][18]	accuracy_top-1: 94.2308, accuracy_top-5: 100.0000
2023-02-06 17:01:13,084 - mmcls - INFO - Saving checkpoint at 22 epochs
2023-02-06 17:01:14,054 - mmcls - INFO - Epoch(val) [22][18]	accuracy_top-1: 92.6573, accuracy_top-5: 100.0000
2023-02-06 17:01:19,453 - mmcls - INFO - Saving checkpoint at 23 epochs
2023-02-06 17:01:20,419 - mmcls - INFO - Epoch(val) [23][18]	accuracy_top-1: 94.2308, accuracy_top-5: 100.0000
2023-02-06 17:01:25,847 - mmcls - INFO - Saving checkpoint at 24 epochs
2023-02-06 17:01:26,808 - mmcls - INFO - Epoch(val) [24][18]	accuracy_top-1: 90.0350, accuracy_top-5: 100.0000
2023-02-06 17:01:32,247 - mmcls - INFO - Saving checkpoint at 25 epochs
2023-02-06 17:01:33,219 - mmcls - INFO - Epoch(val) [25][18]	accuracy_top-1: 89.3357, accuracy_top-5: 100.0000
2023-02-06 17:01:38,660 - mmcls - INFO - Saving checkpoint at 26 epochs
2023-02-06 17:01:39,616 - mmcls - INFO - Epoch(val) [26][18]	accuracy_top-1: 90.3846, accuracy_top-5: 100.0000
2023-02-06 17:01:45,027 - mmcls - INFO - Saving checkpoint at 27 epochs
2023-02-06 17:01:45,994 - mmcls - INFO - Epoch(val) [27][18]	accuracy_top-1: 92.8322, accuracy_top-5: 100.0000
2023-02-06 17:01:51,412 - mmcls - INFO - Saving checkpoint at 28 epochs
2023-02-06 17:01:52,374 - mmcls - INFO - Epoch(val) [28][18]	accuracy_top-1: 92.3077, accuracy_top-5: 100.0000
2023-02-06 17:01:57,776 - mmcls - INFO - Saving checkpoint at 29 epochs
2023-02-06 17:01:58,736 - mmcls - INFO - Epoch(val) [29][18]	accuracy_top-1: 93.3566, accuracy_top-5: 100.0000
2023-02-06 17:02:04,179 - mmcls - INFO - Saving checkpoint at 30 epochs
2023-02-06 17:02:05,152 - mmcls - INFO - Epoch(val) [30][18]	accuracy_top-1: 93.1818, accuracy_top-5: 100.0000
2023-02-06 17:02:10,583 - mmcls - INFO - Saving checkpoint at 31 epochs
2023-02-06 17:02:11,552 - mmcls - INFO - Epoch(val) [31][18]	accuracy_top-1: 94.9301, accuracy_top-5: 100.0000
2023-02-06 17:02:16,987 - mmcls - INFO - Saving checkpoint at 32 epochs
2023-02-06 17:02:17,956 - mmcls - INFO - Epoch(val) [32][18]	accuracy_top-1: 94.4056, accuracy_top-5: 100.0000
2023-02-06 17:02:23,421 - mmcls - INFO - Saving checkpoint at 33 epochs
2023-02-06 17:02:24,389 - mmcls - INFO - Epoch(val) [33][18]	accuracy_top-1: 94.7552, accuracy_top-5: 100.0000
2023-02-06 17:02:29,774 - mmcls - INFO - Saving checkpoint at 34 epochs
2023-02-06 17:02:30,735 - mmcls - INFO - Epoch(val) [34][18]	accuracy_top-1: 94.4056, accuracy_top-5: 100.0000
2023-02-06 17:02:36,183 - mmcls - INFO - Saving checkpoint at 35 epochs
2023-02-06 17:02:37,153 - mmcls - INFO - Epoch(val) [35][18]	accuracy_top-1: 95.2797, accuracy_top-5: 100.0000
2023-02-06 17:02:42,565 - mmcls - INFO - Saving checkpoint at 36 epochs
2023-02-06 17:02:43,533 - mmcls - INFO - Epoch(val) [36][18]	accuracy_top-1: 95.2797, accuracy_top-5: 100.0000
2023-02-06 17:02:48,922 - mmcls - INFO - Saving checkpoint at 37 epochs
2023-02-06 17:02:49,889 - mmcls - INFO - Epoch(val) [37][18]	accuracy_top-1: 95.1049, accuracy_top-5: 100.0000
2023-02-06 17:02:55,301 - mmcls - INFO - Saving checkpoint at 38 epochs
2023-02-06 17:02:56,265 - mmcls - INFO - Epoch(val) [38][18]	accuracy_top-1: 95.4545, accuracy_top-5: 100.0000
2023-02-06 17:03:01,665 - mmcls - INFO - Saving checkpoint at 39 epochs
2023-02-06 17:03:02,632 - mmcls - INFO - Epoch(val) [39][18]	accuracy_top-1: 94.9301, accuracy_top-5: 100.0000
2023-02-06 17:03:08,056 - mmcls - INFO - Saving checkpoint at 40 epochs
2023-02-06 17:03:09,036 - mmcls - INFO - Epoch(val) [40][18]	accuracy_top-1: 95.4545, accuracy_top-5: 100.0000
2023-02-06 17:03:14,440 - mmcls - INFO - Saving checkpoint at 41 epochs
2023-02-06 17:03:15,413 - mmcls - INFO - Epoch(val) [41][18]	accuracy_top-1: 95.1049, accuracy_top-5: 100.0000
2023-02-06 17:03:20,850 - mmcls - INFO - Saving checkpoint at 42 epochs
2023-02-06 17:03:21,814 - mmcls - INFO - Epoch(val) [42][18]	accuracy_top-1: 94.5804, accuracy_top-5: 100.0000
2023-02-06 17:03:27,226 - mmcls - INFO - Saving checkpoint at 43 epochs
2023-02-06 17:03:28,185 - mmcls - INFO - Epoch(val) [43][18]	accuracy_top-1: 95.4545, accuracy_top-5: 100.0000
2023-02-06 17:03:33,611 - mmcls - INFO - Saving checkpoint at 44 epochs
2023-02-06 17:03:34,585 - mmcls - INFO - Epoch(val) [44][18]	accuracy_top-1: 94.7552, accuracy_top-5: 100.0000
2023-02-06 17:03:40,025 - mmcls - INFO - Saving checkpoint at 45 epochs
2023-02-06 17:03:40,988 - mmcls - INFO - Epoch(val) [45][18]	accuracy_top-1: 94.9301, accuracy_top-5: 100.0000
2023-02-06 17:03:46,379 - mmcls - INFO - Saving checkpoint at 46 epochs
2023-02-06 17:03:47,354 - mmcls - INFO - Epoch(val) [46][18]	accuracy_top-1: 94.9301, accuracy_top-5: 100.0000
2023-02-06 17:03:52,779 - mmcls - INFO - Saving checkpoint at 47 epochs
2023-02-06 17:03:53,750 - mmcls - INFO - Epoch(val) [47][18]	accuracy_top-1: 94.9301, accuracy_top-5: 100.0000
2023-02-06 17:03:59,191 - mmcls - INFO - Saving checkpoint at 48 epochs
2023-02-06 17:04:00,146 - mmcls - INFO - Epoch(val) [48][18]	accuracy_top-1: 94.7552, accuracy_top-5: 100.0000
2023-02-06 17:04:05,600 - mmcls - INFO - Saving checkpoint at 49 epochs
2023-02-06 17:04:06,567 - mmcls - INFO - Epoch(val) [49][18]	accuracy_top-1: 94.7552, accuracy_top-5: 100.0000
2023-02-06 17:04:12,017 - mmcls - INFO - Saving checkpoint at 50 epochs
2023-02-06 17:04:12,978 - mmcls - INFO - Epoch(val) [50][18]	accuracy_top-1: 95.4545, accuracy_top-5: 100.0000
2023-02-06 17:04:18,435 - mmcls - INFO - Saving checkpoint at 51 epochs
2023-02-06 17:04:19,403 - mmcls - INFO - Epoch(val) [51][18]	accuracy_top-1: 94.5804, accuracy_top-5: 100.0000
2023-02-06 17:04:24,850 - mmcls - INFO - Saving checkpoint at 52 epochs
2023-02-06 17:04:25,819 - mmcls - INFO - Epoch(val) [52][18]	accuracy_top-1: 95.1049, accuracy_top-5: 100.0000
2023-02-06 17:04:31,260 - mmcls - INFO - Saving checkpoint at 53 epochs
2023-02-06 17:04:32,229 - mmcls - INFO - Epoch(val) [53][18]	accuracy_top-1: 95.1049, accuracy_top-5: 100.0000
2023-02-06 17:04:37,629 - mmcls - INFO - Saving checkpoint at 54 epochs
2023-02-06 17:04:38,593 - mmcls - INFO - Epoch(val) [54][18]	accuracy_top-1: 94.7552, accuracy_top-5: 100.0000
2023-02-06 17:04:44,018 - mmcls - INFO - Saving checkpoint at 55 epochs
2023-02-06 17:04:44,979 - mmcls - INFO - Epoch(val) [55][18]	accuracy_top-1: 94.5804, accuracy_top-5: 100.0000
2023-02-06 17:04:50,441 - mmcls - INFO - Saving checkpoint at 56 epochs
2023-02-06 17:04:51,409 - mmcls - INFO - Epoch(val) [56][18]	accuracy_top-1: 94.5804, accuracy_top-5: 100.0000
2023-02-06 17:04:56,868 - mmcls - INFO - Saving checkpoint at 57 epochs
2023-02-06 17:04:57,839 - mmcls - INFO - Epoch(val) [57][18]	accuracy_top-1: 94.5804, accuracy_top-5: 100.0000
2023-02-06 17:05:03,253 - mmcls - INFO - Saving checkpoint at 58 epochs
2023-02-06 17:05:04,219 - mmcls - INFO - Epoch(val) [58][18]	accuracy_top-1: 95.1049, accuracy_top-5: 100.0000
2023-02-06 17:05:09,655 - mmcls - INFO - Saving checkpoint at 59 epochs
2023-02-06 17:05:10,622 - mmcls - INFO - Epoch(val) [59][18]	accuracy_top-1: 95.1049, accuracy_top-5: 100.0000
2023-02-06 17:05:16,028 - mmcls - INFO - Saving checkpoint at 60 epochs
2023-02-06 17:05:16,991 - mmcls - INFO - Epoch(val) [60][18]	accuracy_top-1: 95.1049, accuracy_top-5: 100.0000
2023-02-06 17:05:22,385 - mmcls - INFO - Saving checkpoint at 61 epochs
2023-02-06 17:05:23,351 - mmcls - INFO - Epoch(val) [61][18]	accuracy_top-1: 94.5804, accuracy_top-5: 100.0000
2023-02-06 17:05:28,758 - mmcls - INFO - Saving checkpoint at 62 epochs
2023-02-06 17:05:29,741 - mmcls - INFO - Epoch(val) [62][18]	accuracy_top-1: 95.1049, accuracy_top-5: 100.0000
2023-02-06 17:05:35,197 - mmcls - INFO - Saving checkpoint at 63 epochs
2023-02-06 17:05:36,179 - mmcls - INFO - Epoch(val) [63][18]	accuracy_top-1: 94.4056, accuracy_top-5: 100.0000
2023-02-06 17:05:41,632 - mmcls - INFO - Saving checkpoint at 64 epochs
2023-02-06 17:05:42,605 - mmcls - INFO - Epoch(val) [64][18]	accuracy_top-1: 95.6294, accuracy_top-5: 100.0000
2023-02-06 17:05:48,070 - mmcls - INFO - Saving checkpoint at 65 epochs
2023-02-06 17:05:49,057 - mmcls - INFO - Epoch(val) [65][18]	accuracy_top-1: 95.1049, accuracy_top-5: 100.0000
2023-02-06 17:05:54,937 - mmcls - INFO - Saving checkpoint at 66 epochs
2023-02-06 17:05:56,101 - mmcls - INFO - Epoch(val) [66][18]	accuracy_top-1: 95.1049, accuracy_top-5: 100.0000
2023-02-06 17:06:01,858 - mmcls - INFO - Saving checkpoint at 67 epochs
2023-02-06 17:06:02,881 - mmcls - INFO - Epoch(val) [67][18]	accuracy_top-1: 95.1049, accuracy_top-5: 100.0000
2023-02-06 17:06:08,490 - mmcls - INFO - Saving checkpoint at 68 epochs
2023-02-06 17:06:09,545 - mmcls - INFO - Epoch(val) [68][18]	accuracy_top-1: 95.4545, accuracy_top-5: 100.0000
2023-02-06 17:06:15,261 - mmcls - INFO - Saving checkpoint at 69 epochs
2023-02-06 17:06:16,263 - mmcls - INFO - Epoch(val) [69][18]	accuracy_top-1: 94.7552, accuracy_top-5: 100.0000
2023-02-06 17:06:21,694 - mmcls - INFO - Saving checkpoint at 70 epochs
2023-02-06 17:06:22,681 - mmcls - INFO - Epoch(val) [70][18]	accuracy_top-1: 94.7552, accuracy_top-5: 100.0000
2023-02-06 17:06:28,191 - mmcls - INFO - Saving checkpoint at 71 epochs
2023-02-06 17:06:29,164 - mmcls - INFO - Epoch(val) [71][18]	accuracy_top-1: 94.9301, accuracy_top-5: 100.0000
2023-02-06 17:06:34,629 - mmcls - INFO - Saving checkpoint at 72 epochs
2023-02-06 17:06:35,602 - mmcls - INFO - Epoch(val) [72][18]	accuracy_top-1: 94.9301, accuracy_top-5: 100.0000
2023-02-06 17:06:41,066 - mmcls - INFO - Saving checkpoint at 73 epochs
2023-02-06 17:06:42,040 - mmcls - INFO - Epoch(val) [73][18]	accuracy_top-1: 95.4545, accuracy_top-5: 100.0000
2023-02-06 17:06:47,504 - mmcls - INFO - Saving checkpoint at 74 epochs
2023-02-06 17:06:48,482 - mmcls - INFO - Epoch(val) [74][18]	accuracy_top-1: 95.2797, accuracy_top-5: 100.0000
2023-02-06 17:06:53,909 - mmcls - INFO - Saving checkpoint at 75 epochs
2023-02-06 17:06:54,887 - mmcls - INFO - Epoch(val) [75][18]	accuracy_top-1: 94.5804, accuracy_top-5: 100.0000
2023-02-06 17:07:00,356 - mmcls - INFO - Saving checkpoint at 76 epochs
2023-02-06 17:07:01,330 - mmcls - INFO - Epoch(val) [76][18]	accuracy_top-1: 94.7552, accuracy_top-5: 100.0000
2023-02-06 17:07:06,805 - mmcls - INFO - Saving checkpoint at 77 epochs
2023-02-06 17:07:07,775 - mmcls - INFO - Epoch(val) [77][18]	accuracy_top-1: 95.1049, accuracy_top-5: 100.0000
2023-02-06 17:07:13,217 - mmcls - INFO - Saving checkpoint at 78 epochs
2023-02-06 17:07:14,189 - mmcls - INFO - Epoch(val) [78][18]	accuracy_top-1: 95.2797, accuracy_top-5: 100.0000
2023-02-06 17:07:19,653 - mmcls - INFO - Saving checkpoint at 79 epochs
2023-02-06 17:07:20,637 - mmcls - INFO - Epoch(val) [79][18]	accuracy_top-1: 95.1049, accuracy_top-5: 100.0000
2023-02-06 17:07:26,055 - mmcls - INFO - Saving checkpoint at 80 epochs
2023-02-06 17:07:27,037 - mmcls - INFO - Epoch(val) [80][18]	accuracy_top-1: 95.2797, accuracy_top-5: 100.0000
2023-02-06 17:07:32,484 - mmcls - INFO - Saving checkpoint at 81 epochs
2023-02-06 17:07:33,457 - mmcls - INFO - Epoch(val) [81][18]	accuracy_top-1: 95.4545, accuracy_top-5: 100.0000
2023-02-06 17:07:38,911 - mmcls - INFO - Saving checkpoint at 82 epochs
2023-02-06 17:07:39,877 - mmcls - INFO - Epoch(val) [82][18]	accuracy_top-1: 95.2797, accuracy_top-5: 100.0000
2023-02-06 17:07:45,294 - mmcls - INFO - Saving checkpoint at 83 epochs
2023-02-06 17:07:46,271 - mmcls - INFO - Epoch(val) [83][18]	accuracy_top-1: 94.7552, accuracy_top-5: 100.0000
2023-02-06 17:07:51,767 - mmcls - INFO - Saving checkpoint at 84 epochs
2023-02-06 17:07:52,734 - mmcls - INFO - Epoch(val) [84][18]	accuracy_top-1: 95.2797, accuracy_top-5: 100.0000
2023-02-06 17:07:58,167 - mmcls - INFO - Saving checkpoint at 85 epochs
2023-02-06 17:07:59,142 - mmcls - INFO - Epoch(val) [85][18]	accuracy_top-1: 94.9301, accuracy_top-5: 100.0000
2023-02-06 17:08:04,562 - mmcls - INFO - Saving checkpoint at 86 epochs
2023-02-06 17:08:05,533 - mmcls - INFO - Epoch(val) [86][18]	accuracy_top-1: 94.9301, accuracy_top-5: 100.0000
2023-02-06 17:08:10,975 - mmcls - INFO - Saving checkpoint at 87 epochs
2023-02-06 17:08:11,947 - mmcls - INFO - Epoch(val) [87][18]	accuracy_top-1: 94.9301, accuracy_top-5: 100.0000
2023-02-06 17:08:17,439 - mmcls - INFO - Saving checkpoint at 88 epochs
2023-02-06 17:08:18,409 - mmcls - INFO - Epoch(val) [88][18]	accuracy_top-1: 94.7552, accuracy_top-5: 100.0000
2023-02-06 17:08:23,826 - mmcls - INFO - Saving checkpoint at 89 epochs
2023-02-06 17:08:24,792 - mmcls - INFO - Epoch(val) [89][18]	accuracy_top-1: 95.1049, accuracy_top-5: 100.0000
2023-02-06 17:08:30,264 - mmcls - INFO - Saving checkpoint at 90 epochs
2023-02-06 17:08:31,237 - mmcls - INFO - Epoch(val) [90][18]	accuracy_top-1: 94.9301, accuracy_top-5: 100.0000
2023-02-06 17:08:36,655 - mmcls - INFO - Saving checkpoint at 91 epochs
2023-02-06 17:08:37,624 - mmcls - INFO - Epoch(val) [91][18]	accuracy_top-1: 95.1049, accuracy_top-5: 100.0000
2023-02-06 17:08:43,057 - mmcls - INFO - Saving checkpoint at 92 epochs
2023-02-06 17:08:44,044 - mmcls - INFO - Epoch(val) [92][18]	accuracy_top-1: 95.2797, accuracy_top-5: 100.0000
2023-02-06 17:08:49,453 - mmcls - INFO - Saving checkpoint at 93 epochs
2023-02-06 17:08:50,426 - mmcls - INFO - Epoch(val) [93][18]	accuracy_top-1: 95.2797, accuracy_top-5: 100.0000
2023-02-06 17:08:55,847 - mmcls - INFO - Saving checkpoint at 94 epochs
2023-02-06 17:08:56,822 - mmcls - INFO - Epoch(val) [94][18]	accuracy_top-1: 95.1049, accuracy_top-5: 100.0000
2023-02-06 17:09:02,260 - mmcls - INFO - Saving checkpoint at 95 epochs
2023-02-06 17:09:03,232 - mmcls - INFO - Epoch(val) [95][18]	accuracy_top-1: 94.9301, accuracy_top-5: 100.0000
2023-02-06 17:09:08,688 - mmcls - INFO - Saving checkpoint at 96 epochs
2023-02-06 17:09:09,660 - mmcls - INFO - Epoch(val) [96][18]	accuracy_top-1: 94.7552, accuracy_top-5: 100.0000
2023-02-06 17:09:15,103 - mmcls - INFO - Saving checkpoint at 97 epochs
2023-02-06 17:09:16,074 - mmcls - INFO - Epoch(val) [97][18]	accuracy_top-1: 95.2797, accuracy_top-5: 100.0000
2023-02-06 17:09:21,538 - mmcls - INFO - Saving checkpoint at 98 epochs
2023-02-06 17:09:22,520 - mmcls - INFO - Epoch(val) [98][18]	accuracy_top-1: 94.9301, accuracy_top-5: 100.0000
2023-02-06 17:09:28,010 - mmcls - INFO - Saving checkpoint at 99 epochs
2023-02-06 17:09:28,980 - mmcls - INFO - Epoch(val) [99][18]	accuracy_top-1: 95.2797, accuracy_top-5: 100.0000
2023-02-06 17:09:34,408 - mmcls - INFO - Saving checkpoint at 100 epochs
2023-02-06 17:09:35,385 - mmcls - INFO - Epoch(val) [100][18]	accuracy_top-1: 94.5804, accuracy_top-5: 100.0000
